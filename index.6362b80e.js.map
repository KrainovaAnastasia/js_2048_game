{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.state = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    // eslint-disable-next-line no-console\n    }\n    updateUI() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = this.state[row][col];\n            cell.className = \"field-cell\";\n            if (value > 0) {\n                cell.classList.add(`field-cell--${value}`);\n                cell.textContent = value;\n            } else cell.textContent = \"\";\n        });\n        document.querySelector(\".game-score\").textContent = this.score;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) emptyCells.push({\n                    row: rowIndex,\n                    col: colIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            const newValue = Math.random() < 0.9 ? 2 : 4;\n            this.state[row][col] = newValue;\n        }\n    }\n    moveRight() {\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.state[row].filter((value)=>value !== 0);\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow[col + 1] = 0;\n            }\n            const filteredRow = newRow.filter((value)=>value !== 0);\n            while(filteredRow.length < 4)filteredRow.unshift(0);\n            if (filteredRow.toString() !== this.state[row].toString()) {\n                this.state[row] = filteredRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateUI();\n        }\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.state[row].filter((value)=>value !== 0);\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow[col + 1] = 0;\n            }\n            const filteredRow = newRow.filter((value)=>value !== 0);\n            while(filteredRow.length < 4)filteredRow.push(0);\n            if (filteredRow.toString() !== this.state[row].toString()) {\n                this.state[row] = filteredRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateUI();\n        }\n    }\n    moveUp() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const newCol = [];\n            for(let row = 0; row < 4; row++)if (this.state[row][col] !== 0) newCol.push(this.state[row][col]);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol[i + 1] = 0;\n            }\n            const filteredCol = newCol.filter((value)=>value !== 0);\n            while(filteredCol.length < 4)filteredCol.push(0);\n            for(let row = 0; row < 4; row++)if (this.state[row][col] !== filteredCol[row]) {\n                this.state[row][col] = filteredCol[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateUI();\n        }\n    }\n    moveDown() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const newCol = [];\n            for(let row = 3; row >= 0; row--)if (this.state[row][col] !== 0) newCol.push(this.state[row][col]);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol[i + 1] = 0;\n            }\n            const filteredCol = newCol.filter((value)=>value !== 0);\n            while(filteredCol.length < 4)filteredCol.push(0);\n            for(let row = 0; row < 4; row++)if (this.state[3 - row][col] !== filteredCol[row]) {\n                this.state[3 - row][col] = filteredCol[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateUI();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {}\n    /**\n   * @returns {number[][]}\n   */ getState() {}\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        let hasEmptyTile = false;\n        let canMerge = false;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.state[row][col] === 2048) {\n                this.status = \"win\";\n                return \"win\";\n            }\n            if (this.state[row][col] === 0) hasEmptyTile = true;\n            if (row < 3 && this.state[row][col] === this.state[row + 1][col] || col < 3 && this.state[row][col] === this.state[row][col + 1]) canMerge = true;\n        }\n        if (!hasEmptyTile && !canMerge) {\n            this.status = \"lose\";\n            return \"lose\";\n        } else {\n            this.status = \"playing\";\n            return \"playing\";\n        }\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateUI();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateUI();\n        this.getStatus();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$ARROW_RIGHT = \"ArrowRight\";\nconst $09e991522ca7e64e$var$ARROW_LEFT = \"ArrowLeft\";\nconst $09e991522ca7e64e$var$ARROW_UP = \"ArrowUp\";\nconst $09e991522ca7e64e$var$ARROW_DOWN = \"ArrowDown\";\nconst $09e991522ca7e64e$var$startRestartButton = document.getElementById(\"start-button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$handleGameStatus(gameStatus) {\n    if (gameStatus === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    } else if (gameStatus === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startRestartButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startRestartButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startRestartButton.classList.remove(\"start\");\n    } else {\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startRestartButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startRestartButton.textContent === \"Start\") {\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startRestartButton.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$handleGameStatus(\"playing\");\n    }\n});\ndocument.addEventListener(\"keydown\", (evnt)=>{\n    switch(evnt.key){\n        case $09e991522ca7e64e$var$ARROW_LEFT:\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case $09e991522ca7e64e$var$ARROW_RIGHT:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case $09e991522ca7e64e$var$ARROW_UP:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case $09e991522ca7e64e$var$ARROW_DOWN:\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    const cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach((cell)=>{\n        cell.classList.add(\"moving\");\n    });\n    $09e991522ca7e64e$var$game.updateUI();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$handleGameStatus(gameStatus);\n    setTimeout(()=>{\n        cells.forEach((cell)=>{\n            cell.classList.remove(\"moving\");\n        });\n    }, 300);\n});\n\n\n//# sourceMappingURL=index.6362b80e.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst ARROW_RIGHT = 'ArrowRight';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\n\nconst startRestartButton = document.getElementById('start-button');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction handleGameStatus(gameStatus) {\n  if (gameStatus === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n  } else if (gameStatus === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n\n    startRestartButton.textContent = 'Restart';\n    startRestartButton.classList.add('restart');\n    startRestartButton.classList.remove('start');\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\nstartRestartButton.addEventListener('click', () => {\n  if (startRestartButton.textContent === 'Start') {\n    messageStart.classList.add('hidden');\n    game.start();\n    startRestartButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    messageStart.classList.add('hidden');\n    handleGameStatus('playing');\n  }\n});\n\ndocument.addEventListener('keydown', (evnt) => {\n  switch (evnt.key) {\n    case ARROW_LEFT:\n      game.moveLeft();\n      break;\n    case ARROW_RIGHT:\n      game.moveRight();\n      break;\n    case ARROW_UP:\n      game.moveUp();\n      break;\n    case ARROW_DOWN:\n      game.moveDown();\n      break;\n  }\n\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell) => {\n    cell.classList.add('moving');\n  });\n\n  game.updateUI();\n\n  const gameStatus = game.getStatus();\n\n  handleGameStatus(gameStatus);\n\n  setTimeout(() => {\n    cells.forEach((cell) => {\n      cell.classList.remove('moving');\n    });\n  }, 300);\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.state = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n\n    // eslint-disable-next-line no-console\n  }\n\n  updateUI() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = this.state[row][col];\n\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n\n    document.querySelector('.game-score').textContent = this.score;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n      const newValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.state[row][col] = newValue;\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.state[row].filter((value) => value !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow[col + 1] = 0;\n        }\n      }\n\n      const filteredRow = newRow.filter((value) => value !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      if (filteredRow.toString() !== this.state[row].toString()) {\n        this.state[row] = filteredRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.state[row].filter((value) => value !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow[col + 1] = 0;\n        }\n      }\n\n      const filteredRow = newRow.filter((value) => value !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (filteredRow.toString() !== this.state[row].toString()) {\n        this.state[row] = filteredRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== 0) {\n          newCol.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol[i + 1] = 0;\n        }\n      }\n\n      const filteredCol = newCol.filter((value) => value !== 0);\n\n      while (filteredCol.length < 4) {\n        filteredCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== filteredCol[row]) {\n          this.state[row][col] = filteredCol[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 3; row >= 0; row--) {\n        if (this.state[row][col] !== 0) {\n          newCol.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol[i + 1] = 0;\n        }\n      }\n\n      const filteredCol = newCol.filter((value) => value !== 0);\n\n      while (filteredCol.length < 4) {\n        filteredCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[3 - row][col] !== filteredCol[row]) {\n          this.state[3 - row][col] = filteredCol[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {}\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {}\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let hasEmptyTile = false;\n    let canMerge = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return 'win';\n        }\n\n        if (this.state[row][col] === 0) {\n          hasEmptyTile = true;\n        }\n\n        if (\n          (row < 3 && this.state[row][col] === this.state[row + 1][col]) ||\n          (col < 3 && this.state[row][col] === this.state[row][col + 1])\n        ) {\n          canMerge = true;\n        }\n      }\n    }\n\n    if (!hasEmptyTile && !canMerge) {\n      this.status = 'lose';\n\n      return 'lose';\n    } else {\n      this.status = 'playing';\n\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateUI();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.status = 'playing';\n\n    this.addRandomTile();\n    this.addRandomTile();\n\n    this.updateUI();\n    this.getStatus();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","score","status","updateUI","cells","document","querySelectorAll","forEach","cell","index","row","Math","floor","value","className","classList","add","textContent","querySelector","addRandomTile","emptyCells","rowIndex","colIndex","push","col","length","randomIndex","random","newValue","moveRight","moved","newRow","filter","filteredRow","unshift","toString","moveLeft","moveUp","newCol","i","filteredCol","moveDown","getScore","getState","getStatus","hasEmptyTile","canMerge","start","restart","$09e991522ca7e64e$var$startRestartButton","getElementById","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$handleGameStatus","gameStatus","remove","addEventListener","evnt","key","setTimeout"],"version":3,"file":"index.6362b80e.js.map"}