{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.state = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"updateUI\",\n            value: function updateUI() {\n                var _this = this;\n                var cells = document.querySelectorAll(\".field-cell\");\n                cells.forEach(function(cell, index) {\n                    var row = Math.floor(index / 4);\n                    var col = index % 4;\n                    var value = _this.state[row][col];\n                    cell.className = \"field-cell\";\n                    if (value > 0) {\n                        cell.classList.add(\"field-cell--\".concat(value));\n                        cell.textContent = value;\n                    } else cell.textContent = \"\";\n                });\n                document.querySelector(\".game-score\").textContent = this.score;\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                this.state.forEach(function(row, rowIndex) {\n                    row.forEach(function(cell, colIndex) {\n                        if (cell === 0) emptyCells.push({\n                            row: rowIndex,\n                            col: colIndex\n                        });\n                    });\n                });\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], row = _emptyCells_randomIndex.row, col = _emptyCells_randomIndex.col;\n                    var newValue = Math.random() < 0.9 ? 2 : 4;\n                    this.state[row][col] = newValue;\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.state[row].filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                        newRow[col] *= 2;\n                        _this.score += newRow[col];\n                        newRow[col + 1] = 0;\n                    }\n                    var filteredRow = newRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(filteredRow.length < 4)filteredRow.unshift(0);\n                    if (filteredRow.toString() !== _this.state[row].toString()) {\n                        _this.state[row] = filteredRow;\n                        moved = true;\n                    }\n                };\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.state[row].filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                        newRow[col] *= 2;\n                        _this.score += newRow[col];\n                        newRow[col + 1] = 0;\n                    }\n                    var filteredRow = newRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(filteredRow.length < 4)filteredRow.push(0);\n                    if (filteredRow.toString() !== _this.state[row].toString()) {\n                        _this.state[row] = filteredRow;\n                        moved = true;\n                    }\n                };\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.state[row][col] !== 0) newCol.push(_this.state[row][col]);\n                    for(var i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        _this.score += newCol[i];\n                        newCol[i + 1] = 0;\n                    }\n                    var filteredCol = newCol.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(filteredCol.length < 4)filteredCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++)if (_this.state[row1][col] !== filteredCol[row1]) {\n                        _this.state[row1][col] = filteredCol[row1];\n                        moved = true;\n                    }\n                };\n                var moved = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 3; row >= 0; row--)if (_this.state[row][col] !== 0) newCol.push(_this.state[row][col]);\n                    for(var i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        _this.score += newCol[i];\n                        newCol[i + 1] = 0;\n                    }\n                    var filteredCol = newCol.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(filteredCol.length < 4)filteredCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++)if (_this.state[3 - row1][col] !== filteredCol[row1]) {\n                        _this.state[3 - row1][col] = filteredCol[row1];\n                        moved = true;\n                    }\n                };\n                var moved = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {}\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {}\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var hasEmptyTile = false;\n                var canMerge = false;\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.state[row][col] === 2048) {\n                        this.status = \"win\";\n                        return \"win\";\n                    }\n                    if (this.state[row][col] === 0) hasEmptyTile = true;\n                    if (row < 3 && this.state[row][col] === this.state[row + 1][col] || col < 3 && this.state[row][col] === this.state[row][col + 1]) canMerge = true;\n                }\n                if (!hasEmptyTile && !canMerge) {\n                    this.status = \"lose\";\n                    return \"lose\";\n                } else {\n                    this.status = \"playing\";\n                    return \"playing\";\n                }\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n                this.updateUI();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n                this.updateUI();\n                this.getStatus();\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$ARROW_RIGHT = \"ArrowRight\";\nvar $197cd56b15c33885$var$ARROW_LEFT = \"ArrowLeft\";\nvar $197cd56b15c33885$var$ARROW_UP = \"ArrowUp\";\nvar $197cd56b15c33885$var$ARROW_DOWN = \"ArrowDown\";\nvar $197cd56b15c33885$var$startRestartButton = document.getElementById(\"start-button\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nfunction $197cd56b15c33885$var$handleGameStatus(gameStatus) {\n    if (gameStatus === \"win\") {\n        $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    } else if (gameStatus === \"lose\") {\n        $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$startRestartButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$startRestartButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$startRestartButton.classList.remove(\"start\");\n    } else {\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    }\n}\n$197cd56b15c33885$var$startRestartButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$startRestartButton.textContent === \"Start\") {\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startRestartButton.textContent = \"Restart\";\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$handleGameStatus(\"playing\");\n    }\n});\ndocument.addEventListener(\"keydown\", function(evnt) {\n    switch(evnt.key){\n        case $197cd56b15c33885$var$ARROW_LEFT:\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case $197cd56b15c33885$var$ARROW_RIGHT:\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case $197cd56b15c33885$var$ARROW_UP:\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case $197cd56b15c33885$var$ARROW_DOWN:\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n    var cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach(function(cell) {\n        cell.classList.add(\"moving\");\n    });\n    $197cd56b15c33885$var$game.updateUI();\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    $197cd56b15c33885$var$handleGameStatus(gameStatus);\n    setTimeout(function() {\n        cells.forEach(function(cell) {\n            cell.classList.remove(\"moving\");\n        });\n    }, 300);\n});\n\n})();\n//# sourceMappingURL=index.ce7c1c10.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst ARROW_RIGHT = 'ArrowRight';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\n\nconst startRestartButton = document.getElementById('start-button');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction handleGameStatus(gameStatus) {\n  if (gameStatus === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n  } else if (gameStatus === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n\n    startRestartButton.textContent = 'Restart';\n    startRestartButton.classList.add('restart');\n    startRestartButton.classList.remove('start');\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\nstartRestartButton.addEventListener('click', () => {\n  if (startRestartButton.textContent === 'Start') {\n    messageStart.classList.add('hidden');\n    game.start();\n    startRestartButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    messageStart.classList.add('hidden');\n    handleGameStatus('playing');\n  }\n});\n\ndocument.addEventListener('keydown', (evnt) => {\n  switch (evnt.key) {\n    case ARROW_LEFT:\n      game.moveLeft();\n      break;\n    case ARROW_RIGHT:\n      game.moveRight();\n      break;\n    case ARROW_UP:\n      game.moveUp();\n      break;\n    case ARROW_DOWN:\n      game.moveDown();\n      break;\n  }\n\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell) => {\n    cell.classList.add('moving');\n  });\n\n  game.updateUI();\n\n  const gameStatus = game.getStatus();\n\n  handleGameStatus(gameStatus);\n\n  setTimeout(() => {\n    cells.forEach((cell) => {\n      cell.classList.remove('moving');\n    });\n  }, 300);\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.state = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n\n    // eslint-disable-next-line no-console\n  }\n\n  updateUI() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = this.state[row][col];\n\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n\n    document.querySelector('.game-score').textContent = this.score;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n      const newValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.state[row][col] = newValue;\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.state[row].filter((value) => value !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow[col + 1] = 0;\n        }\n      }\n\n      const filteredRow = newRow.filter((value) => value !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      if (filteredRow.toString() !== this.state[row].toString()) {\n        this.state[row] = filteredRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.state[row].filter((value) => value !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow[col + 1] = 0;\n        }\n      }\n\n      const filteredRow = newRow.filter((value) => value !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (filteredRow.toString() !== this.state[row].toString()) {\n        this.state[row] = filteredRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== 0) {\n          newCol.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol[i + 1] = 0;\n        }\n      }\n\n      const filteredCol = newCol.filter((value) => value !== 0);\n\n      while (filteredCol.length < 4) {\n        filteredCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== filteredCol[row]) {\n          this.state[row][col] = filteredCol[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 3; row >= 0; row--) {\n        if (this.state[row][col] !== 0) {\n          newCol.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol[i + 1] = 0;\n        }\n      }\n\n      const filteredCol = newCol.filter((value) => value !== 0);\n\n      while (filteredCol.length < 4) {\n        filteredCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[3 - row][col] !== filteredCol[row]) {\n          this.state[3 - row][col] = filteredCol[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateUI();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {}\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {}\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let hasEmptyTile = false;\n    let canMerge = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return 'win';\n        }\n\n        if (this.state[row][col] === 0) {\n          hasEmptyTile = true;\n        }\n\n        if (\n          (row < 3 && this.state[row][col] === this.state[row + 1][col]) ||\n          (col < 3 && this.state[row][col] === this.state[row][col + 1])\n        ) {\n          canMerge = true;\n        }\n      }\n    }\n\n    if (!hasEmptyTile && !canMerge) {\n      this.status = 'lose';\n\n      return 'lose';\n    } else {\n      this.status = 'playing';\n\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateUI();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.status = 'playing';\n\n    this.addRandomTile();\n    this.addRandomTile();\n\n    this.updateUI();\n    this.getStatus();\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","state","score","status","key","value","_this","cells","document","querySelectorAll","forEach","cell","index","row","Math","floor","className","classList","add","concat","textContent","querySelector","emptyCells","rowIndex","colIndex","push","col","length","randomIndex","random","_emptyCells_randomIndex","newValue","moved","_loop","newRow","filter","filteredRow","unshift","toString","addRandomTile","updateUI","newCol","i","filteredCol","row1","hasEmptyTile","canMerge","getStatus","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$startRestartButton","getElementById","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$handleGameStatus","gameStatus","remove","addEventListener","start","restart","evnt","moveLeft","moveRight","moveUp","moveDown","setTimeout"],"version":3,"file":"index.ce7c1c10.js.map"}